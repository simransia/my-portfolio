/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: David Jávorcsík (https://sketchfab.com/Redlobo)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/steamy-fruit-shop-dae-bazaar-e982aaab6b7b4880a16cd445a7610548
Title: Steamy Fruit Shop - DAE Bazaar
*/

import React, { useRef, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import Scene from "@/assets/steamy_fruit_shop_-_dae_bazaar.glb";
import { useFrame, useThree } from "@react-three/fiber";

const FruitShop = ({
  isRotating,
  setIsRotating,
  setCurrentStage,
  currentFocusPoint,
  ...props
}) => {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(Scene);
  const { actions, names } = useAnimations(animations, group);
  //   useEffect(() => {
  //     actions[names[0]]?.reset().play();
  //   }, [animations]);
  const { gl, viewport } = useThree();

  const lastX = useRef(0);

  const rotationSpeed = useRef(0);
  // Define a damping factor to control rotation damping
  const dampingFactor = 0.95;

  // Handle pointer (mouse or touch) down event
  const handlePointerDown = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(true);

    // Calculate the clientX based on whether it's a touch event or a mouse event
    const clientX = event.touches ? event.touches[0].clientX : event.clientX;

    // Store the current clientX position for reference
    lastX.current = clientX;
  };

  // Handle pointer (mouse or touch) up event
  const handlePointerUp = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(false);
  };

  // Handle pointer (mouse or touch) move event
  const handlePointerMove = (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (isRotating) {
      // If rotation is enabled, calculate the change in clientX position
      const clientX = event.touches ? event.touches[0].clientX : event.clientX;

      // calculate the change in the horizontal position of the mouse cursor or touch input,
      // relative to the viewport's width
      const delta = (clientX - lastX.current) / viewport.width;

      // Update the island's rotation based on the mouse/touch movement
      group.current.rotation.y += delta * 0.01 * Math.PI;

      // Update the reference for the last clientX position
      lastX.current = clientX;

      // Update the rotation speed
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  // Handle keydown events
  const handleKeyDown = (event) => {
    if (event.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);

      group.current.rotation.y += 0.005 * Math.PI;
      rotationSpeed.current = 0.007;
    } else if (event.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);

      group.current.rotation.y -= 0.005 * Math.PI;
      rotationSpeed.current = -0.007;
    }
  };

  // Handle keyup events
  const handleKeyUp = (event) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  // This function is called on each frame update
  useFrame(() => {
    // If not rotating, apply damping to slow down the rotation (smoothly)
    if (!isRotating) {
      // Apply damping factor
      rotationSpeed.current *= dampingFactor;

      // Stop rotation when speed is very small
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      group.current.rotation.y += rotationSpeed.current;
    } else {
      // When rotating, determine the current stage based on island's orientation
      const rotation = group.current.rotation.y;

      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group
            name="8202540a9059483b8b69a22454956dc9fbx"
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.01}
          >
            <group name="Object_2">
              <group name="RootNode">
                <group
                  name="Ball"
                  position={[16.04, 413.541, -144.717]}
                  rotation={[-0.011, -0.307, -0.014]}
                >
                  <group name="ORANGE1" position={[10.024, -107.406, -3.499]}>
                    <mesh
                      name="ORANGE1_Texture_1_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.ORANGE1_Texture_1_0.geometry}
                      material={materials.Texture_1}
                    />
                  </group>
                  <group name="ORANGE2" position={[10.024, -107.406, -3.499]}>
                    <mesh
                      name="ORANGE2_Texture_1_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.ORANGE2_Texture_1_0.geometry}
                      material={materials.Texture_1}
                    />
                    <group
                      name="polySurface1087"
                      position={[-319.662, -443.539, 80.556]}
                    >
                      <mesh
                        name="polySurface1087_Texture_1_0"
                        castShadow
                        receiveShadow
                        geometry={nodes.polySurface1087_Texture_1_0.geometry}
                        material={materials.Texture_1}
                      />
                    </group>
                    <group
                      name="polySurface1088"
                      position={[-319.662, -443.539, 80.556]}
                    >
                      <mesh
                        name="polySurface1088_Texture_1_0"
                        castShadow
                        receiveShadow
                        geometry={nodes.polySurface1088_Texture_1_0.geometry}
                        material={materials.Texture_1}
                      />
                    </group>
                  </group>
                  <group name="ORANGE3" position={[10.024, -107.406, -3.499]}>
                    <mesh
                      name="ORANGE3_Texture_1_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.ORANGE3_Texture_1_0.geometry}
                      material={materials.Texture_1}
                    />
                    <group
                      name="polySurface1090"
                      position={[-319.662, -443.539, 80.556]}
                    >
                      <mesh
                        name="polySurface1090_Texture_1_0"
                        castShadow
                        receiveShadow
                        geometry={nodes.polySurface1090_Texture_1_0.geometry}
                        material={materials.Texture_1}
                      />
                    </group>
                  </group>
                  <group name="ORANGE4" position={[10.101, -108.057, -3.473]}>
                    <mesh
                      name="ORANGE4_Texture_1_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.ORANGE4_Texture_1_0.geometry}
                      material={materials.Texture_1}
                    />
                    <group name="polySurface1091">
                      <mesh
                        name="polySurface1091_Texture_1_0"
                        castShadow
                        receiveShadow
                        geometry={nodes.polySurface1091_Texture_1_0.geometry}
                        material={materials.Texture_1}
                      />
                    </group>
                  </group>
                  <group name="ORANGE5" position={[10.024, -107.406, -3.499]}>
                    <mesh
                      name="ORANGE5_Texture_1_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.ORANGE5_Texture_1_0.geometry}
                      material={materials.Texture_1}
                    />
                  </group>
                  <group name="ORANGE6" position={[10.024, -107.406, -3.499]}>
                    <mesh
                      name="ORANGE6_Texture_1_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.ORANGE6_Texture_1_0.geometry}
                      material={materials.Texture_1}
                    />
                  </group>
                </group>
                <group name="Scene">
                  <mesh
                    name="Scene_Texture_1_0"
                    castShadow
                    receiveShadow
                    geometry={nodes.Scene_Texture_1_0.geometry}
                    material={materials.Texture_1}
                  />
                  <mesh
                    name="Scene_Texture_2_0"
                    castShadow
                    receiveShadow
                    geometry={nodes.Scene_Texture_2_0.geometry}
                    material={materials.Texture_2}
                  />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
};

export default FruitShop;
